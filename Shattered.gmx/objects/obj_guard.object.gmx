<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Guard_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_npc_base</parentName>
  <maskName>Guard_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

///Initialize Variables
grav = 1;
hsp = 0;
vsp = 0;
max_vsp = 15;
movesp = 10;
hp = 50;
original_x = 0;
attacking = false;
moving_right = true;
state_of_action = 1;
friendly = true;
following = false
fcount= 0;
vulnerableCount = 25;
vulnerable = true;

first_xscale = image_xscale;

sprite_state = 0; //0 - idle | 1 - running | 2 - attack
last_state = sprite_state;

image_speed = image_number / room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//Sprite direction
    if(sign(hsp) &lt; 0){
        image_xscale = first_xscale * -1;
    } else if (sign(hsp) &gt; 0){
        image_xscale = first_xscale;
    }

///Changing sprites
if(last_state != sprite_state){
    switch(sprite_state){
        case 0:
            sprite_index = Guard_idle;
            break;
        case 1:
            sprite_index = Guard_running;
            break;
        case 2:
            sprite_index = Guard_attack;
            break;
        default:
            //sprite_index = player_idle;
            break;
    }
    image_index = 0;
    image_speed = 0.05;//image_number / room_speed;
}

last_state = sprite_state;
if(sprite_state == 1 &amp;&amp; (image_index==1 || image_index==3))
{
    gmwPostEvent(global.Play_Footstep, id);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
